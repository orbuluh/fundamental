# :shinto_shrine: Fundamentals :shinto_shrine:

:frog: :thinking: :exploding_head: :bulb: :star_struck: :sunrise:

Quote from [HTDP](https://htdp.org/)
> * ... many elements of the general design recipe apply to the design of algorithms ... The key to designing algorithms is the “generation” step, which often means **dividing up the problem. And figuring out a novel way of dividing a problem requires insight.**
> * ... programmers must thoroughly understand the underlying ideas so that they can code up algorithms and have the program **communicate with future readers.** The best way to get acquainted with the idea is to **study a wide range of examples and to develop a sense for the kinds of generative recursions that may show up in the real world.**

<br/>

## Cpp perfomance trick

- Use when the perfomance distribution is skewed by the trick...

```cpp
static const int io_trick = []() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::cout.tie(nullptr);
  return 0;
}();
```

<details><summary markdown="span">Explain</summary>

- The `std::cin.tie(nullptr)` and `std::cout.tie(nullptr)` calls are used to untie the `cin` and `cout` streams, respectively, from the `cout` stream.
- By default, the `std::cin` stream is tied to the `std::cout` stream, meaning that when you perform an input operation, the output stream is flushed.
- This can cause a performance overhead, especially in situations where you have a mix of input and output operations.
- By untying the streams, you avoid the unnecessary flushing and improve the overall performance.
- Declaring the `io_trick` variable as `static` in this context serves two purposes:
  - Initialization Guarantee:
    - By declaring the variable as `static`, it ensures that the initialization of the variable will happen only once during the program's lifetime.
    - The lambda function will be invoked and executed during this initialization.
    - This guarantees that the I/O trick is applied early on in the program before any input/output operations occur.
  - Scope Limitation:
    - By making the `io_trick` variable `static`, its scope is limited to the current translation unit (source file).
    - It prevents the variable from being accessible or visible to other translation units.
    - This can be desirable in situations where you want to ensure that the I/O trick is applied only in a specific file or module and does not affect the behavior of other parts of the program.


</summary></details>

## [:book: Notes for algo/DS deep-dive](_notes/README.md)

## :thinking: Problems listed: {{ total_count }} ... :ok_hand: x {{difficulty[':ok_hand:']}} :bulb: x {{difficulty[':bulb:']}} :persevere: x {{difficulty[':persevere:']}} :dizzy_face: x {{difficulty[':dizzy_face:']}} :exploding_head: x {{difficulty[':exploding_head:']}}

{% for folder, contents in content_dump.items()|sort(attribute='0')%}

### [{{ folder_title[folder] }}]({{ folder }}/README.md): {{ cnt_per_chapter[folder] }}

<details><summary>Questions</summary>

{% for content in contents %}
  {% if '##' in content %}
  {{ content }}
  {% else %}
  - {{ content }}
  {% endif %}
{% endfor %}

</details>

{% endfor %}

